# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Prereqs
        run: |
          brew install wget
          brew install pkg-config
          brew install dylibbundler
          brew install opam
          brew install libtool
          brew install autoconf
          brew install automake
      - name: Cache opam
        uses: actions/cache@v2
        with:
          path: .opam
          key: opam-${{ hashFiles('Makefile.darwin') }}
      # Build the OCaml compiler
      # - restore_cache:
      #      key: ocaml-cache-{{ checksum "Makefile.darwin"}}
      - name: Print previous failure
        run: |
          cat ~/.opam/log/charrua-core*.out
          cat ~/.opam/log/charrua-core*.env
      - name: Build OCaml compiler
        run: |
          make -f Makefile.darwin ocaml
          eval $(opam env)
      # - save_cache:
      #      paths:
      #        - /Users/distiller/.opam
      #      key: ocaml-cache-{{ checksum "Makefile.darwin"}}
      # Build the OCaml dependencies, make sure the cache is cleared if the dependencies change.
      # - restore_cache:
      #      key: depends-cache-{{ checksum "vpnkit.opam" }}-{{ checksum "Makefile.darwin"}}
      - name: Build the OCaml dependencies
        run: make -f Makefile.darwin depends
      # - save_cache:
      #      paths:
      #        - /Users/distiller/.opam
      #      key: depends-cache-{{ checksum "vpnkit.opam" }}-{{ checksum "Makefile.darwin"}}
      - name: Build vpnkit
        run: make -f Makefile.darwin build
      - name: Make build artifact
        run: make -f Makefile.darwin artefacts
      - name: Get commit hash
        run: make -f Makefile.darwin COMMIT
      # The {{ checksum }} only works for files, not directories
      - name: Generate cache key for OSS-LICENSES
        run: git ls-tree HEAD repo -- repo | awk '{print $3}' > repo.hash
      # - restore_cache:
      #     key: license-cache-{{ checksum "repo.hash" }}-{{ checksum "vpnkit.opam"}}
      - name: Make Licenses
        run: make -f Makefile.darwin OSS-LICENSES
      # - save_cache:
      #     paths:
      #         - OSS-LICENSES
      #     key: license-cache-{{ checksum "repo.hash" }}-{{ checksum "vpnkit.opam"}}
      - name: Test
        run: make -f Makefile.darwin test

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"
      - name: Get Commit message
        id: commit_message
        run: echo "::set-output name=message::$(git log -1 --no-merges --pretty=format:"%s")"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.date.outputs.date }}
          release_name: Release ${{ steps.date.outputs.date}}
          body: ${{ steps.commit_message.outputs.message }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./vpnkit.tgz
          asset_name: vpnkit-${{ steps.date.outputs.date }}.tgz
          asset_content_type: application/gzip
      - name: Upload Commit
        id: upload-commit
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./COMMIT
          asset_name: COMMIT
          asset_content_type: text/plain
      - name: Upload Licenses
        id: upload-licenses
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./OSS-LICENSES
          asset_name: OSS-LICENSES
          asset_content_type: text/plain
